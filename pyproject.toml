[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
requires-python = ">=3.7"
name = "sparql-profiler"
description = "A package to profile SPARQL endpoints to extract the nodes and relations represented in the knowledge graph"
readme = "README.md"
license = { file = "LICENSE.txt" }
authors = [
    { name = "Vincent Emonet", email = "vincent.emonet@gmail.com" },
]
maintainers = [
    { name = "Vincent Emonet", email = "vincent.emonet@gmail.com" },
]
keywords = [
    "Python",
]
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
dynamic = ["version"]

dependencies = [
    "typer >=0.6.0",
    "rdflib>=6.1.1",
    "SPARQLWrapper",
    "requests",
]


[project.scripts]
sparql-profiler = "sparql_profiler.__main__:cli"


[project.optional-dependencies]
test = [
    "pytest >=7.1.3",
    "pytest-cov >=3.0.0",
    "coveralls >=3.3.0",
    "mypy >=0.991",
    "isort >=5.11.0",
    "flake8 >=5.0.0",
    "Flake8-pyproject >=1.2.2",
    "black >=22.8.0",
]
dev = [
    "pre-commit >=2.17.0",
    "autoflake >=1.0.0",
]


[project.urls]
Homepage = "https://github.com/MaastrichtU-IDS/sparql-profiler"
Documentation = "https://github.com/MaastrichtU-IDS/sparql-profiler"
History = "https://github.com/MaastrichtU-IDS/sparql-profiler/releases"
Tracker = "https://github.com/MaastrichtU-IDS/sparql-profiler/issues"
Source = "https://github.com/MaastrichtU-IDS/sparql-profiler"


# ENVIRONMENTS AND SCRIPTS
[tool.hatch.envs.default]
features = [
    "test",
    "dev",
]
post-install-commands = [
    "pre-commit install",
]

[tool.hatch.envs.default.scripts]
profiler = "sparql-profiler profile {args}"
test = "pytest {args}"
cov = "test --cov src {args}"
dev = "python tests/dev.py {args}"
fmt = [
    "isort src tests",
    "autoflake --remove-all-unused-imports --recursive --remove-unused-variables --in-place src tests --exclude=__init__.py",
    "pre-commit run --all-files || true",
    "black src tests",
]
check = [
    "isort --check-only --diff src",
    "flake8 src",
    "mypy src",
    "black src tests --check",
]
all = [
    "format",
    "check",
    "cov",
]

# TOOLS
[tool.hatch.version]
path = "src/sparql_profiler/__init__.py"


[tool.isort]
line_length = 120
skip = ["src/sparql_profiler/__init__.py"]
profile = "black"


[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
omit = ["tests/*"]


[tool.flake8]
max-complexity = 17
max-line-length = 120
per-file-ignores = [
    "__init__.py:F401",
]
ignore = [
    "E501", # line too long
    "E303", # too many blank lines
    "E301", # expected 1 blank lines found 0
    "W503", # line break before binary operator
]


[tool.mypy]
strict = true
implicit_reexport = true
follow_imports = "normal"
ignore_missing_imports = true
pretty = true
show_column_numbers = true
warn_no_return = true
warn_unused_ignores = true
warn_redundant_casts = true
# disallow_untyped_calls = false
# disallow_untyped_defs = false
# disallow_any_generics = false


[tool.pytest.ini_options]
filterwarnings = [
    "ignore::DeprecationWarning:httpx.*:"
]


[tool.black]
color = true
line-length = 120
target-version = ['py310']
skip-string-normalization = true
